// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace lasso_scaled_lambda_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 47> locations_array__ =
  {" (found before start of program)",
  " (in 'lasso_scaled_lambda.stan', line 30, column 4 to column 12)",
  " (in 'lasso_scaled_lambda.stan', line 31, column 4 to column 19)",
  " (in 'lasso_scaled_lambda.stan', line 32, column 4 to column 24)",
  " (in 'lasso_scaled_lambda.stan', line 33, column 4 to column 25)",
  " (in 'lasso_scaled_lambda.stan', line 36, column 4 to column 32)",
  " (in 'lasso_scaled_lambda.stan', line 37, column 4 to column 72)",
  " (in 'lasso_scaled_lambda.stan', line 38, column 4 to column 43)",
  " (in 'lasso_scaled_lambda.stan', line 39, column 4 to column 29)",
  " (in 'lasso_scaled_lambda.stan', line 40, column 4 to column 19)",
  " (in 'lasso_scaled_lambda.stan', line 41, column 4 to column 44)",
  " (in 'lasso_scaled_lambda.stan', line 44, column 4 to column 27)",
  " (in 'lasso_scaled_lambda.stan', line 45, column 4 to column 29)",
  " (in 'lasso_scaled_lambda.stan', line 46, column 4 to column 96)",
  " (in 'lasso_scaled_lambda.stan', line 47, column 4 to column 50)",
  " (in 'lasso_scaled_lambda.stan', line 2, column 4 to column 20)",
  " (in 'lasso_scaled_lambda.stan', line 3, column 4 to column 24)",
  " (in 'lasso_scaled_lambda.stan', line 4, column 4 to column 19)",
  " (in 'lasso_scaled_lambda.stan', line 5, column 4 to column 19)",
  " (in 'lasso_scaled_lambda.stan', line 6, column 11 to column 12)",
  " (in 'lasso_scaled_lambda.stan', line 6, column 14 to column 15)",
  " (in 'lasso_scaled_lambda.stan', line 6, column 4 to column 19)",
  " (in 'lasso_scaled_lambda.stan', line 7, column 11 to column 12)",
  " (in 'lasso_scaled_lambda.stan', line 7, column 4 to column 16)",
  " (in 'lasso_scaled_lambda.stan', line 10, column 11 to column 12)",
  " (in 'lasso_scaled_lambda.stan', line 10, column 14 to column 15)",
  " (in 'lasso_scaled_lambda.stan', line 10, column 4 to column 32)",
  " (in 'lasso_scaled_lambda.stan', line 11, column 15 to column 16)",
  " (in 'lasso_scaled_lambda.stan', line 11, column 4 to column 25)",
  " (in 'lasso_scaled_lambda.stan', line 12, column 15 to column 16)",
  " (in 'lasso_scaled_lambda.stan', line 12, column 4 to column 24)",
  " (in 'lasso_scaled_lambda.stan', line 14, column 8 to column 36)",
  " (in 'lasso_scaled_lambda.stan', line 15, column 8 to column 33)",
  " (in 'lasso_scaled_lambda.stan', line 13, column 18 to line 16, column 5)",
  " (in 'lasso_scaled_lambda.stan', line 13, column 4 to line 16, column 5)",
  " (in 'lasso_scaled_lambda.stan', line 18, column 8 to column 59)",
  " (in 'lasso_scaled_lambda.stan', line 17, column 18 to line 19, column 5)",
  " (in 'lasso_scaled_lambda.stan', line 17, column 4 to line 19, column 5)",
  " (in 'lasso_scaled_lambda.stan', line 21, column 4 to column 29)",
  " (in 'lasso_scaled_lambda.stan', line 22, column 4 to column 28)",
  " (in 'lasso_scaled_lambda.stan', line 23, column 4 to column 18)",
  " (in 'lasso_scaled_lambda.stan', line 25, column 8 to column 49)",
  " (in 'lasso_scaled_lambda.stan', line 26, column 44 to column 75)",
  " (in 'lasso_scaled_lambda.stan', line 26, column 8 to column 75)",
  " (in 'lasso_scaled_lambda.stan', line 24, column 18 to line 27, column 5)",
  " (in 'lasso_scaled_lambda.stan', line 24, column 4 to line 27, column 5)",
  " (in 'lasso_scaled_lambda.stan', line 31, column 11 to column 12)"};
class lasso_scaled_lambda_model final : public model_base_crtp<lasso_scaled_lambda_model> {
 private:
  double r;
  double delta;
  int n;
  int p;
  Eigen::Matrix<double,-1,-1> x_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,-1> standardized_x_data__;
  Eigen::Matrix<double,1,-1> mean_x_data__;
  Eigen::Matrix<double,1,-1> std_x_data__;
  double norm_standardized_x;
  double row_norm;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> standardized_x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> mean_x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> std_x{nullptr, 0};
 public:
  ~lasso_scaled_lambda_model() {}
  lasso_scaled_lambda_model(stan::io::var_context& context__, unsigned int
                            random_seed__ = 0, std::ostream*
                            pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "lasso_scaled_lambda_model_namespace::lasso_scaled_lambda_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization", "r", "double",
        std::vector<size_t>{});
      r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      r = context__.vals_r("r")[(1 - 1)];
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "r", r, 0);
      current_statement__ = 16;
      context__.validate_dims("data initialization", "delta", "double",
        std::vector<size_t>{});
      delta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 16;
      delta = context__.vals_r("delta")[(1 - 1)];
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "delta", delta, 0);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 17;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 18;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("x", "n", n);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("x", "p", p);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(p)});
      x_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_data__.data(), n, p);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 21;
        x_flat__ = context__.vals_r("x");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 22;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), n);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 23;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 24;
      stan::math::validate_non_negative_index("standardized_x", "n", n);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("standardized_x", "p", p);
      current_statement__ = 26;
      standardized_x_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p,
                                std::numeric_limits<double>::quiet_NaN());
      new (&standardized_x)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(standardized_x_data__.data(),
        n, p);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("mean_x", "p", p);
      current_statement__ = 28;
      mean_x_data__ = Eigen::Matrix<double,1,-1>::Constant(p,
                        std::numeric_limits<double>::quiet_NaN());
      new (&mean_x)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(mean_x_data__.data(), p);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("std_x", "p", p);
      current_statement__ = 30;
      std_x_data__ = Eigen::Matrix<double,1,-1>::Constant(p,
                       std::numeric_limits<double>::quiet_NaN());
      new (&std_x)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(std_x_data__.data(), p);
      current_statement__ = 34;
      for (int j = 1; j <= p; ++j) {
        current_statement__ = 31;
        stan::model::assign(mean_x, stan::math::mean(stan::math::col(x, j)),
          "assigning variable mean_x", stan::model::index_uni(j));
        current_statement__ = 32;
        stan::model::assign(std_x, stan::math::sd(stan::math::col(x, j)),
          "assigning variable std_x", stan::model::index_uni(j));
      }
      current_statement__ = 37;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 35;
        stan::model::assign(standardized_x,
          stan::math::elt_divide(
            stan::math::subtract(stan::math::row(x, i), mean_x), std_x),
          "assigning variable standardized_x", stan::model::index_uni(i));
      }
      current_statement__ = 38;
      norm_standardized_x = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 39;
      norm_standardized_x = 0;
      current_statement__ = 40;
      row_norm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 45;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 41;
        row_norm = stan::math::norm1(stan::math::row(standardized_x, i));
        current_statement__ = 43;
        if (stan::math::logical_lt(norm_standardized_x, row_norm)) {
          current_statement__ = 42;
          norm_standardized_x = row_norm;
        }
      }
      current_statement__ = 46;
      stan::math::validate_non_negative_index("beta", "p", p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + p + 1 + 1;
  }
  inline std::string model_name() const final {
    return "lasso_scaled_lambda_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=lasso_scaled_lambda.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "lasso_scaled_lambda_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 4;
      lambda = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      local_scalar_t__ scaled_lambda = DUMMY_VAR__;
      current_statement__ = 6;
      scaled_lambda = (((2 * stan::math::sqrt(stan::math::log(p))) *
        norm_standardized_x) * lambda);
      current_statement__ = 7;
      if (pstream__) {
        stan::math::stan_print(pstream__, "X norm: ");
        stan::math::stan_print(pstream__, norm_standardized_x);
        *(pstream__) << std::endl;
      }
      current_statement__ = 8;
      if (pstream__) {
        stan::math::stan_print(pstream__, "Lambda ");
        stan::math::stan_print(pstream__, lambda);
        *(pstream__) << std::endl;
      }
      current_statement__ = 9;
      if (pstream__) {
        stan::math::stan_print(pstream__, "p ");
        stan::math::stan_print(pstream__, p);
        *(pstream__) << std::endl;
      }
      current_statement__ = 10;
      if (pstream__) {
        stan::math::stan_print(pstream__, "Scaled lambda: ");
        stan::math::stan_print(pstream__, scaled_lambda);
        *(pstream__) << std::endl;
      }
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "scaled_lambda",
        scaled_lambda, 0);
      {
        current_statement__ = 11;
        lp_accum__.add(-(stan::math::log(sigma)));
        current_statement__ = 12;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(lambda, delta, r));
        current_statement__ = 13;
        lp_accum__.add(((n * (stan::math::log(scaled_lambda) -
          stan::math::log(sigma))) - ((scaled_lambda *
          stan::math::norm1(beta)) / sigma)));
        current_statement__ = 14;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y,
                         stan::math::add(mu,
                           stan::math::multiply(standardized_x, beta)), sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "lasso_scaled_lambda_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 4;
      lambda = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      local_scalar_t__ scaled_lambda = DUMMY_VAR__;
      current_statement__ = 6;
      scaled_lambda = (((2 * stan::math::sqrt(stan::math::log(p))) *
        norm_standardized_x) * lambda);
      current_statement__ = 7;
      if (pstream__) {
        stan::math::stan_print(pstream__, "X norm: ");
        stan::math::stan_print(pstream__, norm_standardized_x);
        *(pstream__) << std::endl;
      }
      current_statement__ = 8;
      if (pstream__) {
        stan::math::stan_print(pstream__, "Lambda ");
        stan::math::stan_print(pstream__, lambda);
        *(pstream__) << std::endl;
      }
      current_statement__ = 9;
      if (pstream__) {
        stan::math::stan_print(pstream__, "p ");
        stan::math::stan_print(pstream__, p);
        *(pstream__) << std::endl;
      }
      current_statement__ = 10;
      if (pstream__) {
        stan::math::stan_print(pstream__, "Scaled lambda: ");
        stan::math::stan_print(pstream__, scaled_lambda);
        *(pstream__) << std::endl;
      }
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "scaled_lambda",
        scaled_lambda, 0);
      {
        current_statement__ = 11;
        lp_accum__.add(-(stan::math::log(sigma)));
        current_statement__ = 12;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(lambda, delta, r));
        current_statement__ = 13;
        lp_accum__.add(((n * (stan::math::log(scaled_lambda) -
          stan::math::log(sigma))) - ((scaled_lambda *
          stan::math::norm1(beta)) / sigma)));
        current_statement__ = 14;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y,
                         stan::math::add(mu,
                           stan::math::multiply(standardized_x, beta)), sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "lasso_scaled_lambda_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(p,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      lambda = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      double scaled_lambda = std::numeric_limits<double>::quiet_NaN();
      out__.write(mu);
      out__.write(beta);
      out__.write(sigma);
      out__.write(lambda);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      scaled_lambda = (((2 * stan::math::sqrt(stan::math::log(p))) *
        norm_standardized_x) * lambda);
      current_statement__ = 7;
      if (pstream__) {
        stan::math::stan_print(pstream__, "X norm: ");
        stan::math::stan_print(pstream__, norm_standardized_x);
        *(pstream__) << std::endl;
      }
      current_statement__ = 8;
      if (pstream__) {
        stan::math::stan_print(pstream__, "Lambda ");
        stan::math::stan_print(pstream__, lambda);
        *(pstream__) << std::endl;
      }
      current_statement__ = 9;
      if (pstream__) {
        stan::math::stan_print(pstream__, "p ");
        stan::math::stan_print(pstream__, p);
        *(pstream__) << std::endl;
      }
      current_statement__ = 10;
      if (pstream__) {
        stan::math::stan_print(pstream__, "Scaled lambda: ");
        stan::math::stan_print(pstream__, scaled_lambda);
        *(pstream__) << std::endl;
      }
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "scaled_lambda",
        scaled_lambda, 0);
      if (emit_transformed_parameters__) {
        out__.write(scaled_lambda);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = in__.read<local_scalar_t__>();
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p),
        "assigning variable beta");
      out__.write(beta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 4;
      lambda = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(p)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = context__.vals_r("mu")[(1 - 1)];
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 2;
        beta_flat__ = context__.vals_r("beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 4;
      lambda = context__.vals_r("lambda")[(1 - 1)];
      out__.write_free_lb(0, lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu", "beta", "sigma", "lambda"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"scaled_lambda"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p)},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>> temp{std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu");
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "lambda");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "scaled_lambda");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu");
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "lambda");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "scaled_lambda");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scaled_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scaled_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + p) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (1);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + p) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (1);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = lasso_scaled_lambda_model_namespace::lasso_scaled_lambda_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return lasso_scaled_lambda_model_namespace::profiles__;
}
#endif